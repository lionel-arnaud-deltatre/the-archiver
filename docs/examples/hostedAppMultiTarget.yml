name: "Deployment for hosted apps"

on:
  workflow_dispatch:
    inputs:
      device:
        description: "Select device v1.0"
        type: choice
        required: true
        options:
          - "web"
          - "tizen"
      environment:
        description: "Select environment"
        type: choice
        required: true
        options:
          - "test"
          - "staging"
          - "prod"

jobs:
  Deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - name: "Checkout trunk ü•¶"
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.ARCHIVER_PAT }}

      - name: extract version from .env
        run: |
          cat .env
          SEMVER_VERSION=$(grep 'APP_VERSION' .env | cut -d '=' -f2)
          echo "SEMVER_VERSION=$SEMVER_VERSION" >> $GITHUB_ENV

      - name: confirm Semver Version
        run: echo "The semver version is $SEMVER_VERSION"

      - name: "Use Node.js v20.10.0 üçú"
        uses: actions/setup-node@v4
        with:
          node-version: 20.10.0

      - name: "Install dependencies üßÇ"
        run: |
          npm i

      - name: "Build ${{ github.event.inputs.device }} - ${{ github.event.inputs.environment }} üë∑"
        run: |
          npm run build:${{ github.event.inputs.device }}:${{ github.event.inputs.environment }}

      - name: "Deploy üöÄ"
        id: deploy
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.PROJECT_AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.PROJECT_AWS_SECRET_ACCESS_KEY }}
          AWS_BUCKET_NAME: "${{ vars.PROJECT_AWS_BUCKET_NAME }}"
          AWS_DEFAULT_REGION: ${{ vars.PROJECT_S3_REGION }}
          PROJECT_ROOT_FOLDER: "${{ vars.PROJECT_ROOT_FOLDER }}/${{ github.event.inputs.device }}/${{ github.event.inputs.environment }}"          
          AWS_CACHE_MAX_AGE: 1
        run: |
          echo "Clean the S3 bucket üß¥ s3://${AWS_BUCKET_NAME}/${PROJECT_ROOT_FOLDER}"
          aws s3 rm --recursive --quiet s3://${AWS_BUCKET_NAME}/${PROJECT_ROOT_FOLDER}
          echo "Upload to the S3 bucket üå™Ô∏è"
          aws s3 cp "./dist" "s3://${AWS_BUCKET_NAME}/${PROJECT_ROOT_FOLDER}/" --cache-control max-age=${AWS_CACHE_MAX_AGE} --recursive
          echo "Done üçª"

      - name: Archive folder and Upload to S3
        id: archivefolder
        uses: <soterus-action-path>
        with:
          actionType: "store-folder-with-rollback"
          version: ${{ env.SEMVER_VERSION }}
          appName: "myrepo"
          deviceType: "${{ github.event.inputs.device }}"
          environment: "${{ github.event.inputs.environment }}"
          folderPath: "dist"
        env:
          PROJECT_AWS_ACCESS_KEY_ID_SEC: "PROJECT_AWS_ACCESS_KEY_ID"
          PROJECT_AWS_SECRET_ACCESS_KEY_SEC: "PROJECT_AWS_SECRET_ACCESS_KEY"
          PROJECT_BUCKET_NAME: "${{ vars.PROJECT_AWS_BUCKET_NAME }}"
          PROJECT_S3_REGION: "${{ vars.PROJECT_S3_REGION }}"
          PROJECT_ROOT_FOLDER: "${{ vars.PROJECT_ROOT_FOLDER }}/${{ github.event.inputs.device }}/${{ github.event.inputs.environment }}"          

          ARCHIVER_AWS_ACCESS_KEY_ID: ${{ secrets.ARCHIVER_AWS_ACCESS_KEY_ID }}
          ARCHIVER_AWS_SECRET_ACCESS_KEY: ${{ secrets.ARCHIVER_AWS_SECRET_ACCESS_KEY }}
          ARCHIVER_BUCKET_NAME: ${{ vars.ARCHIVER_BUCKET_NAME }}
          ARCHIVER_S3_REGION: ${{ vars.ARCHIVER_S3_REGION }}
          ARCHIVER_ROOT_FOLDER: ${{ vars.ARCHIVER_ROOT_FOLDER }}

          GITHUB_TOKEN: ${{ secrets.ARCHIVER_PAT }}

      - name: Check Deployment Output
        if: failure() # Conditional to check if the previous step failed
        run: |
          echo "Action failed with error: ${{ steps.archivefolder.outputs.errorMessage }}"
          exit 1

      - name: "Following action"
        run: |
          echo "Following action"